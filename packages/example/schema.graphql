input CreateInterests{
	name: String!
	description: String
}

input UpdateInterests{
	name: String
	description: String
}

type InterestsWithId{
	_id: String!
	name: String!
	description: String
}

type InterestsQuery{
	readAll: [InterestsWithId!]!
	readOne(
		_id: String!
	): InterestsWithId
}

type InterestsMutation{
	create(
		interests: CreateInterests
	): String!
	update(
		interests: UpdateInterests
		_id: String!
	): Boolean!
	delete(
		_id: String!
	): Boolean!
}

input CreatePerson{
	firstName: String!
	lastName: String!
	age: Int!
	height: Float
	hasDrivingLicences: Boolean
	interests: [String!]!
}

input UpdatePerson{
	firstName: String
	lastName: String
	age: Int
	height: Float
	hasDrivingLicences: Boolean
	interests: [String]
}

type PersonWithId{
	_id: String!
	firstName: String!
	lastName: String!
	age: Int!
	height: Float
	hasDrivingLicences: Boolean
	interests: [Interests!]!
}

type PersonQuery{
	readAll: [PersonWithId!]!
	readOne(
		_id: String!
	): PersonWithId
}

type PersonMutation{
	create(
		person: CreatePerson
	): String!
	update(
		person: UpdatePerson
		_id: String!
	): Boolean!
	delete(
		_id: String!
	): Boolean!
}

input CreateCar{
	mark: String
	price: Float
	model: [String]
}

input UpdateCar{
	mark: String
	price: Float
	model: [String]
}

type CarWithId{
	_id: String!
	mark: String
	price: Float
	model: [String]
}

type CarQuery{
	readAll: [CarWithId!]!
	readOne(
		_id: String!
	): CarWithId
}

type CarMutation{
	create(
		car: CreateCar
	): String!
	update(
		car: UpdateCar
		_id: String!
	): Boolean!
	delete(
		_id: String!
	): Boolean!
}

directive @model on OBJECT

type Interests @model{
	name: String!
	description: String
}

type Person @model{
	firstName: String!
	lastName: String!
	age: Int!
	height: Float
	hasDrivingLicences: Boolean
	interests: [Interests!]!
}

type Car @model{
	mark: String
	price: Float
	model: [String]
}

type Query{
	version: String
	interests: InterestsQuery
	person: PersonQuery
	car: CarQuery
}

type Mutation{
	version: String
	interests: InterestsMutation
	person: PersonMutation
	car: CarMutation
}
schema{
	query: Query,
	mutation: Mutation
}